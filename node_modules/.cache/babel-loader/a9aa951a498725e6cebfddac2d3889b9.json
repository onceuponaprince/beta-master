{"ast":null,"code":"import { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { rewardToken as ausdcAddress } from '../constants/tokenAddresses';\nimport apyCalc from \"../yam/clean_build/contracts/ApyCalculator.json\";\nimport ERC20 from \"../yam/clean_build/contracts/IERC20.json\";\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000\n  }\n};\nexport const getPoolStartTime = async poolContract => {\n  return await poolContract.methods.starttime().call();\n};\nexport const stake = async (poolContract, amount, account, tokenName, decimals) => {\n  let now = new Date().getTime() / 1000;\n  const gas = GAS_LIMIT.STAKING[tokenName.toUpperCase()] || GAS_LIMIT.STAKING.DEFAULT;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.stake(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString()).send({\n      from: account,\n      gas\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const unstake = async (poolContract, amount, account, decimals) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.withdraw(new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString()).send({\n      from: account,\n      gas: 400000\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const harvest = async (poolContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return poolContract.methods.getReward().send({\n      from: account,\n      gas: 600000\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert(\"pool not active\");\n  }\n};\nexport const redeem = async (poolContract, account) => {\n  return poolContract.methods.exit().send({\n    from: account,\n    gas: 600000\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const getApy = async (yam, stakeTokenContract, poolAddress, incentivization) => {\n  const getAPY = yam.contracts.contracts.get(\"GetAPY\");\n  const stakeTokenAddr = stakeTokenContract.options.address;\n\n  if (poolAddress == \"0x7597a1565f445EdAC4756bABc2c68F68F55ff9Cb\") {\n    incentivization = \"2191304\" + \"348000000000000000\";\n  }\n\n  if (poolAddress == \"0x6F866ee0C4d60Db4A802774Ca6d690e50400A9F7\") {\n    // the sBTC pool is getting a special calculation, because the price of sBTC on\n    // Uniswap is completely wrong.\n    let balance = yam.toBigN((await getPoolContributions(yam, poolAddress, \"0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6\")));\n    let bitcoinPrice = \"12500\";\n    return yam.toBigN(incentivization).multipliedBy(\"26\").multipliedBy(\"0.055\").multipliedBy(\"100\").dividedBy(bitcoinPrice).dividedBy(balance).toNumber();\n  }\n  /*since we don't have an easy way to differentiate uni pair based pools from non-uni pair pools, we first call the\n   the Apy calculator for uni pairs (there are more of those) then if that fails call the one for the standard pairs*/\n\n\n  try {\n    let result = yam.toBigN((await getAPY.methods.getApy(stakeTokenAddr, true, ausdcAddress, incentivization, 2, poolAddress).call())).dividedBy(\"1000000\").toNumber();\n    return result;\n  } catch {} //we are only using this to supress the error\n\n\n  try {\n    let result = yam.toBigN((await getAPY.methods.getApy(stakeTokenAddr, false, ausdcAddress, incentivization, 2, poolAddress).call())).dividedBy(\"1000000\").toNumber();\n    return result;\n  } catch {}\n\n  return Number.NaN;\n};\nexport const getTvl = async yam => {\n  let valueLocked = 0;\n\n  if (yam) {\n    const oracle = yam.contracts.contracts.get(\"GetAPY\");\n    let addressData = yam.contracts.pools.map(pool => {\n      return {\n        poolAddress: pool.poolContract._address,\n        tokenAddress: pool.stakingToken._address\n      };\n    });\n\n    for (const addresses of addressData) {\n      try {\n        valueLocked += new BigNumber((await oracle.methods.getTvl(addresses.poolAddress, addresses.tokenAddress, true).call())).dividedBy(\"1000000\").toNumber();\n      } catch {\n        try {\n          let value = new BigNumber((await oracle.methods.getTvl(addresses.poolAddress, addresses.tokenAddress, false).call())).dividedBy(\"1000000\").toNumber();\n          if (addresses.poolAddress == '0x6F866ee0C4d60Db4A802774Ca6d690e50400A9F7') value *= 40; //sBTC is wrong on uniswap\n\n          valueLocked += value;\n        } catch {}\n      }\n    }\n\n    return valueLocked;\n  }\n\n  return Number.NaN;\n};\nexport const approve = async (tokenContract, poolContract, account) => {\n  return tokenContract.methods.approve(poolContract.options.address, ethers.constants.MaxUint256).send({\n    from: account,\n    gas: 80000\n  });\n};\nexport const getPoolContracts = yam => {\n  return yam.contracts.pools;\n};\nexport const getEarned = async (yam, pool, account) => {\n  try {\n    const earned = new BigNumber((await pool.methods.earnedAusc(account).call()));\n    return earned;\n  } catch {\n    return yam.toBigN(0);\n  }\n};\nexport const getStaked = async (yam, pool, account) => {\n  return yam.toBigN((await pool.methods.balanceOf(account).call()));\n};\nexport const getCurrentPrice = async yam => {\n  // FORBROCK: get current YAM price\n  return yam.toBigN((await yam.contracts.rebaser.methods.getCurrentTWAP().call()));\n};\nexport const getTargetPrice = async yam => {\n  return yam.toBigN(1).toFixed(2);\n};\nexport const getCirculatingSupply = async yam => {\n  let now = await yam.web3.eth.getBlock('latest');\n  let scalingFactor = yam.toBigN((await yam.contracts.yam.methods.yamsScalingFactor().call()));\n  let starttime = yam.toBigN((await yam.contracts.eth_pool.methods.starttime().call())).toNumber();\n  let timePassed = now[\"timestamp\"] - starttime;\n\n  if (timePassed < 0) {\n    return 0;\n  }\n\n  let yamsDistributed = yam.toBigN(8 * timePassed * 250000 / 625000); //yams from first 8 pools\n\n  let starttimePool2 = yam.toBigN((await yam.contracts.ycrv_pool.methods.starttime().call())).toNumber();\n  timePassed = now[\"timestamp\"] - starttime;\n  let pool2Yams = yam.toBigN(timePassed * 1500000 / 625000); // yams from second pool. note: just accounts for first week\n\n  let circulating = pool2Yams.plus(yamsDistributed).times(scalingFactor).div(10 ** 36).toFixed(2);\n  return circulating;\n};\nexport const getNextRebaseTimestamp = async yam => {\n  try {\n    let now = await yam.web3.eth.getBlock('latest').then(res => res.timestamp);\n    let interval = 43200; // 12 hours\n\n    let offset = 28800; // 8am/8pm utc\n\n    let secondsToRebase = 0;\n\n    if (await yam.contracts.rebaser.methods.rebasingActive().call()) {\n      if (now % interval > offset) {\n        secondsToRebase = interval - now % interval + offset;\n      } else {\n        secondsToRebase = offset - now % interval;\n      }\n    } else {\n      let twap_init = yam.toBigN((await yam.contracts.rebaser.methods.timeOfTWAPInit().call())).toNumber();\n\n      if (twap_init > 0) {\n        let delay = yam.toBigN((await yam.contracts.rebaser.methods.rebaseDelay().call())).toNumber();\n        let endTime = twap_init + delay;\n\n        if (endTime % interval > offset) {\n          secondsToRebase = interval - endTime % interval + offset;\n        } else {\n          secondsToRebase = offset - endTime % interval;\n        }\n\n        return endTime + secondsToRebase;\n      } else {\n        return now + 13 * 60 * 60; // just know that its greater than 12 hours away\n      }\n    }\n\n    return secondsToRebase;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTotalSupply = async yam => {\n  let totals = new BigNumber((await yam.contracts.contracts.get(\"Ausc\").methods.totalSupply().call()));\n  return totals;\n};\nexport const getDecimalPlaces = async (yam, address) => {\n  var contract = new yam.web3.eth.Contract(ERC20.abi, address);\n  return await contract.methods.decimals().call();\n};\nexport const getPoolContributions = async (yam, poolAddress, tokenAddress) => {\n  let contract = await new yam.web3.eth.Contract(ERC20.abi, tokenAddress);\n  return await contract.methods.balanceOf(poolAddress).call();\n};\nexport const getStats = async yam => {\n  const curPrice = await getCurrentPrice(yam);\n  const circSupply = await getCirculatingSupply(yam);\n  const nextRebase = await getNextRebaseTimestamp(yam);\n  const targetPrice = await getTargetPrice(yam);\n  const totalSupply = await getTotalSupply(yam);\n  return {\n    circSupply,\n    curPrice,\n    nextRebase,\n    targetPrice,\n    totalSupply\n  };\n};\nexport const vote = async (yam, account) => {\n  return yam.contracts.gov.methods.castVote(0, true).send({\n    from: account\n  });\n};\nexport const delegate = async (yam, account) => {\n  return yam.contracts.yam.methods.delegate(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").send({\n    from: account,\n    gas: 320000\n  });\n};\nexport const didDelegate = async (yam, account) => {\n  return (await yam.contracts.yam.methods.delegates(account).call()) === '0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84';\n};\nexport const getVotes = async yam => {\n  const votesRaw = new BigNumber((await yam.contracts.yam.methods.getCurrentVotes(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").call())).div(10 ** 24);\n  return votesRaw;\n};\nexport const getScalingFactor = async yam => {\n  return new BigNumber((await yam.contracts.yam.methods.yamsScalingFactor().call()));\n};\nexport const getDelegatedBalance = async (yam, account) => {\n  return new BigNumber((await yam.contracts.yam.methods.balanceOfUnderlying(account).call())).div(10 ** 24);\n};\nexport const migrate = async (yam, account) => {\n  return yam.contracts.yamV2migration.methods.migrate().send({\n    from: account,\n    gas: 320000\n  });\n};\nexport const getMigrationEndTime = async yam => {\n  return yam.toBigN((await yam.contracts.yamV2migration.methods.startTime().call())).plus(yam.toBigN(86400 * 3)).toNumber();\n};","map":{"version":3,"sources":["/Users/onceuponaprince/Desktop/beta-master/src/yamUtils/index.js"],"names":["ethers","BigNumber","rewardToken","ausdcAddress","apyCalc","ERC20","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","getPoolStartTime","poolContract","methods","starttime","call","stake","amount","account","tokenName","decimals","now","Date","getTime","gas","toUpperCase","times","pow","toString","send","from","on","tx","console","log","transactionHash","alert","unstake","withdraw","harvest","getReward","redeem","exit","getApy","yam","stakeTokenContract","poolAddress","incentivization","getAPY","contracts","get","stakeTokenAddr","options","address","balance","toBigN","getPoolContributions","bitcoinPrice","multipliedBy","dividedBy","toNumber","result","Number","NaN","getTvl","valueLocked","oracle","addressData","pools","map","pool","_address","tokenAddress","stakingToken","addresses","value","approve","tokenContract","constants","MaxUint256","getPoolContracts","getEarned","earned","earnedAusc","getStaked","balanceOf","getCurrentPrice","rebaser","getCurrentTWAP","getTargetPrice","toFixed","getCirculatingSupply","web3","eth","getBlock","scalingFactor","yamsScalingFactor","eth_pool","timePassed","yamsDistributed","starttimePool2","ycrv_pool","pool2Yams","circulating","plus","div","getNextRebaseTimestamp","then","res","timestamp","interval","offset","secondsToRebase","rebasingActive","twap_init","timeOfTWAPInit","delay","rebaseDelay","endTime","e","getTotalSupply","totals","totalSupply","getDecimalPlaces","contract","Contract","abi","getStats","curPrice","circSupply","nextRebase","targetPrice","vote","gov","castVote","delegate","didDelegate","delegates","getVotes","votesRaw","getCurrentVotes","getScalingFactor","getDelegatedBalance","balanceOfUnderlying","migrate","yamV2migration","getMigrationEndTime","startTime"],"mappings":"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","sourcesContent":["import {ethers} from 'ethers'\n\nimport BigNumber from 'bignumber.js'\nimport { rewardToken as ausdcAddress,  } from '../constants/tokenAddresses'\nimport apyCalc from \"../yam/clean_build/contracts/ApyCalculator.json\";\nimport ERC20 from \"../yam/clean_build/contracts/IERC20.json\";\n\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n});\n\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000,\n  }\n};\n\nexport const getPoolStartTime = async (poolContract) => {\n  return await poolContract.methods.starttime().call()\n}\n\nexport const stake = async (poolContract, amount, account, tokenName, decimals) => {\n  let now = new Date().getTime() / 1000;\n  const gas = GAS_LIMIT.STAKING[tokenName.toUpperCase()] || GAS_LIMIT.STAKING.DEFAULT;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .stake((new BigNumber(amount).times(new BigNumber(10).pow(decimals))).toString())\n      .send({ from: account, gas })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } else {\n    alert(\"pool not active\");\n  }\n}\n\nexport const unstake = async (poolContract, amount, account, decimals) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .withdraw((new BigNumber(amount).times(new BigNumber(10).pow(decimals))).toString())\n      .send({ from: account, gas: 400000 })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } else {\n    alert(\"pool not active\");\n  }\n}\n\nexport const harvest = async (poolContract, account) => {\n  let now = new Date().getTime() / 1000;\n  if (now >= 1597172400) {\n    return poolContract.methods\n      .getReward()\n      .send({ from: account, gas: 600000 })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } else {\n    alert(\"pool not active\");\n  }\n}\n\nexport const redeem = async (poolContract, account) => {\n    return poolContract.methods\n      .exit()\n      .send({ from: account, gas: 600000 })\n      .on('transactionHash', tx => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n}\n\nexport const getApy = async (yam,stakeTokenContract, poolAddress, incentivization) =>{\n  const getAPY = yam.contracts.contracts.get(\"GetAPY\");\n  const stakeTokenAddr = stakeTokenContract.options.address;\n  if (poolAddress == \"0x7597a1565f445EdAC4756bABc2c68F68F55ff9Cb\") {\n    incentivization = \"2191304\" + \"348000000000000000\"\n  }\n\n  if (poolAddress == \"0x6F866ee0C4d60Db4A802774Ca6d690e50400A9F7\") {\n    // the sBTC pool is getting a special calculation, because the price of sBTC on\n    // Uniswap is completely wrong.\n    let balance = yam.toBigN(await getPoolContributions(yam, poolAddress, \"0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6\"))\n    let bitcoinPrice = \"12500\"\n    return yam.toBigN(incentivization).multipliedBy(\"26\").multipliedBy(\"0.055\").multipliedBy(\"100\").dividedBy(bitcoinPrice).dividedBy(balance).toNumber();\n  }\n\n  /*since we don't have an easy way to differentiate uni pair based pools from non-uni pair pools, we first call the\n   the Apy calculator for uni pairs (there are more of those) then if that fails call the one for the standard pairs*/\n  try {\n    let result = yam.toBigN(await getAPY.methods.getApy(stakeTokenAddr, true, ausdcAddress, (incentivization),2,poolAddress ).call()).dividedBy(\"1000000\").toNumber()\n    return result\n  } catch { }//we are only using this to supress the error\n\n  try {\n    let result = yam.toBigN(await getAPY.methods.getApy(stakeTokenAddr, false, ausdcAddress, (incentivization),2,poolAddress ).call()).dividedBy(\"1000000\").toNumber()\n    return result\n  } catch { } \n\n  return Number.NaN;\n}\n\nexport const getTvl = async (yam) => {\n  let valueLocked =0;\n\n  if (yam) {\n    const oracle = yam.contracts.contracts.get(\"GetAPY\");\n    let addressData = yam.contracts.pools.map(pool => {\n      return {poolAddress: pool.poolContract._address, tokenAddress: pool.stakingToken._address}\n    })\n\n    for (const addresses of addressData ) {\n      try {\n        valueLocked += new BigNumber(await oracle.methods.getTvl(addresses.poolAddress, addresses.tokenAddress, true).call()).dividedBy(\"1000000\").toNumber()\n      } catch {\n        try {\n          let value = new BigNumber(await oracle.methods.getTvl(addresses.poolAddress, addresses.tokenAddress, false).call()).dividedBy(\"1000000\").toNumber()\n          if (addresses.poolAddress =='0x6F866ee0C4d60Db4A802774Ca6d690e50400A9F7')\n            value *=40; //sBTC is wrong on uniswap\n          valueLocked += value;\n        } catch {}\n      }\n    }\n    return valueLocked;\n  }\n  return Number.NaN;\n}\n\nexport const approve = async (tokenContract, poolContract, account) => {\n  return tokenContract.methods\n    .approve(poolContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account, gas: 80000 })\n}\n\nexport const getPoolContracts = (yam) => {\n  return yam.contracts.pools;\n}\n\nexport const getEarned = async (yam, pool, account) => {\n  try {\n    const earned = new BigNumber(await pool.methods.earnedAusc(account).call())\n    return earned;\n  } catch {\n    return yam.toBigN(0);\n  }\n}\n\nexport const getStaked = async (yam, pool, account) => {\n  return yam.toBigN(await pool.methods.balanceOf(account).call())\n}\n\nexport const getCurrentPrice = async (yam) => {\n  // FORBROCK: get current YAM price\n  return yam.toBigN(await yam.contracts.rebaser.methods.getCurrentTWAP().call())\n}\n\nexport const getTargetPrice = async (yam) => {\n  return yam.toBigN(1).toFixed(2);\n}\n\nexport const getCirculatingSupply = async (yam) => {\n  let now = await yam.web3.eth.getBlock('latest');\n  let scalingFactor = yam.toBigN(await yam.contracts.yam.methods.yamsScalingFactor().call());\n  let starttime = yam.toBigN(await yam.contracts.eth_pool.methods.starttime().call()).toNumber();\n  let timePassed = now[\"timestamp\"] - starttime;\n  if (timePassed < 0) {\n    return 0;\n  }\n  let yamsDistributed = yam.toBigN(8 * timePassed * 250000 / 625000); //yams from first 8 pools\n  let starttimePool2 = yam.toBigN(await yam.contracts.ycrv_pool.methods.starttime().call()).toNumber();\n  timePassed = now[\"timestamp\"] - starttime;\n  let pool2Yams = yam.toBigN(timePassed * 1500000 / 625000); // yams from second pool. note: just accounts for first week\n  let circulating = pool2Yams.plus(yamsDistributed).times(scalingFactor).div(10**36).toFixed(2)\n  return circulating\n}\n\nexport const getNextRebaseTimestamp = async (yam) => {\n  try {\n    let now = await yam.web3.eth.getBlock('latest').then(res => res.timestamp);\n    let interval = 43200; // 12 hours\n    let offset = 28800; // 8am/8pm utc\n    let secondsToRebase = 0;\n    if (await yam.contracts.rebaser.methods.rebasingActive().call()) {\n      if (now % interval > offset) {\n          secondsToRebase = (interval - (now % interval)) + offset;\n       } else {\n          secondsToRebase = offset - (now % interval);\n      }\n    } else {\n      let twap_init = yam.toBigN(await yam.contracts.rebaser.methods.timeOfTWAPInit().call()).toNumber();\n      if (twap_init > 0) {\n        let delay = yam.toBigN(await yam.contracts.rebaser.methods.rebaseDelay().call()).toNumber();\n        let endTime = twap_init + delay;\n        if (endTime % interval > offset) {\n            secondsToRebase = (interval - (endTime % interval)) + offset;\n         } else {\n            secondsToRebase = offset - (endTime % interval);\n        }\n        return endTime + secondsToRebase;\n      } else {\n        return now + 13*60*60; // just know that its greater than 12 hours away\n      }\n    }\n    return secondsToRebase\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const getTotalSupply = async (yam) => {\n  let totals = new BigNumber(await yam.contracts.contracts.get(\"Ausc\").methods.totalSupply().call());\n  return totals\n}\n\nexport const getDecimalPlaces = async (yam, address) => {\n  var contract = new yam.web3.eth.Contract(ERC20.abi, address)\n  return await contract.methods.decimals().call();\n}\n\nexport const getPoolContributions = async (yam, poolAddress, tokenAddress) => {\n  let contract = await new yam.web3.eth.Contract(ERC20.abi, tokenAddress)\n  return await contract.methods.balanceOf(poolAddress).call()\n}\n\nexport const getStats = async (yam) => {\n  const curPrice = await getCurrentPrice(yam)\n  const circSupply = await getCirculatingSupply(yam)\n  const nextRebase = await getNextRebaseTimestamp(yam)\n  const targetPrice = await getTargetPrice(yam)\n  const totalSupply = await getTotalSupply(yam)\n  return {\n    circSupply,\n    curPrice,\n    nextRebase,\n    targetPrice,\n    totalSupply\n  }\n}\n\nexport const vote = async (yam, account) => {\n  return yam.contracts.gov.methods.castVote(0, true).send({ from: account })\n}\n\nexport const delegate = async (yam, account) => {\n  return yam.contracts.yam.methods.delegate(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").send({from: account, gas: 320000 })\n}\n\nexport const didDelegate = async (yam, account) => {\n  return await yam.contracts.yam.methods.delegates(account).call() === '0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84'\n}\n\nexport const getVotes = async (yam) => {\n  const votesRaw = new BigNumber(await yam.contracts.yam.methods.getCurrentVotes(\"0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84\").call()).div(10**24)\n  return votesRaw\n}\n\nexport const getScalingFactor = async (yam) => {\n  return new BigNumber(await yam.contracts.yam.methods.yamsScalingFactor().call())\n}\n\nexport const getDelegatedBalance = async (yam, account) => {\n  return new BigNumber(await yam.contracts.yam.methods.balanceOfUnderlying(account).call()).div(10**24)\n}\n\nexport const migrate = async (yam, account) => {\n  return yam.contracts.yamV2migration.methods.migrate().send({ from: account, gas: 320000 })\n}\n\nexport const getMigrationEndTime = async (yam) => {\n  return yam.toBigN(await yam.contracts.yamV2migration.methods.startTime().call()).plus(yam.toBigN(86400*3)).toNumber()\n}\n\n"]},"metadata":{},"sourceType":"module"}