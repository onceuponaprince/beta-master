{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport * as Types from \"./types.js\";\nimport { SUBTRACT_GAS_LIMIT, addressMap } from './constants.js';\nimport { rewardToken } from '../../constants/tokenAddresses';\nimport ERC20Json from '../clean_build/contracts/IERC20.json';\nimport YAMv2Json from '../clean_build/contracts/YAMv2.json';\nimport YAMJson from '../clean_build/contracts/YAMDelegator.json';\nimport apyCalc from '../clean_build/contracts/ApyCalculator.json';\n\nconst requiredFiles3x = require.context('../../pools/3x', false, /\\.json$/);\n\nconst requiredFilesBase = require.context('../../pools/base', false, /\\.json$/);\n\nconst requiredFilesLp = require.context('../../pools/lp', false, /\\.json$/);\n\nconst images = require.context('../../pools/', false, /\\.png$/);\n\nexport class Contracts {\n  constructor(provider, networkId, web3, options) {\n    this.web3 = web3;\n    this.contracts = new Map();\n    this.pools = [];\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n    this.yam = new this.web3.eth.Contract(YAMJson.abi);\n    this.yamV2 = new this.web3.eth.Contract(YAMv2Json.abi);\n    this.getPool(requiredFiles3x, '3x');\n    this.getPool(requiredFilesBase, 'base');\n    this.getPool(requiredFilesLp, 'lp');\n    this.contracts.set('GetAPY', new this.web3.eth.Contract(apyCalc, '0xa717A8d28BD76eFb0B9880b06C35034d8A7C8De7'));\n    this.contracts.set('Ausc', new this.web3.eth.Contract(ERC20Json.abi, rewardToken));\n    this.yam.setProvider(provider);\n  }\n\n  getPool(files, sort) {\n    files.keys().forEach(fileName => {\n      let json = files(fileName);\n      let pool = {\n        \"properties\": json.properties,\n        \"poolContract\": new this.web3.eth.Contract(json.abi),\n        \"stakingToken\": new this.web3.eth.Contract(ERC20Json.abi)\n      };\n      pool.poolContract.options.address = json.properties.pool_address;\n      pool.stakingToken.options.address = json.properties.stake_token_address;\n      pool.properties.farm_icon_path = this.getCorrespondingImage(pool.properties.id, sort);\n      pool.properties.category = sort;\n      this.pools.push(pool);\n    });\n  }\n\n  getCorrespondingImage(poolID, sort) {\n    try {\n      return require(`../../pools/${sort}/${poolID}.png`);\n    } catch {}\n\n    return require('../../assets/img/eth-diamond-purple.png');\n  }\n\n  async callContractFunction(method, options) {\n    const {\n      confirmations,\n      confirmationType,\n      autoGasMultiplier,\n      ...txOptions\n    } = options;\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit();\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice;\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate;\n\n      if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n        txOptions.gas = this.defaultGas;\n      } else {\n        try {\n          console.log(\"estimating gas\");\n          gasEstimate = await method.estimateGas(txOptions);\n        } catch (error) {\n          const data = method.encodeABI();\n          const {\n            from,\n            value\n          } = options;\n          const to = method._parent._address;\n          error.transactionData = {\n            from,\n            value,\n            data,\n            to\n          };\n          throw error;\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n        const totalGas = Math.floor(gasEstimate * multiplier);\n        txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas;\n        return {\n          gasEstimate,\n          g\n        };\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n    } else {\n      txOptions.value = '0';\n    }\n\n    const promi = method.send(txOptions);\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2\n    };\n    let hashOutcome = OUTCOMES.INITIAL;\n    let confirmationOutcome = OUTCOMES.INITIAL;\n    const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`);\n    }\n\n    let hashPromise;\n    let confirmationPromise;\n\n    if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n      hashPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        promi.on('transactionHash', txHash => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.RESOLVED;\n            resolve(txHash);\n\n            if (t !== Types.ConfirmationType.Both) {\n              const anyPromi = promi;\n              anyPromi.off();\n            }\n          }\n        });\n      });\n    }\n\n    if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n      confirmationPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if ((t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED) && confirmationOutcome === OUTCOMES.INITIAL) {\n            confirmationOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        const desiredConf = confirmations || this.defaultConfirmations;\n\n        if (desiredConf) {\n          promi.on('confirmation', (confNumber, receipt) => {\n            if (confNumber >= desiredConf) {\n              if (confirmationOutcome === OUTCOMES.INITIAL) {\n                confirmationOutcome = OUTCOMES.RESOLVED;\n                resolve(receipt);\n                const anyPromi = promi;\n                anyPromi.off();\n              }\n            }\n          });\n        } else {\n          promi.on('receipt', receipt => {\n            confirmationOutcome = OUTCOMES.RESOLVED;\n            resolve(receipt);\n            const anyPromi = promi;\n            anyPromi.off();\n          });\n        }\n      });\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise;\n\n      if (this.notifier) {\n        this.notifier.hash(transactionHash);\n      }\n\n      return {\n        transactionHash\n      };\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise;\n    }\n\n    const transactionHash = await hashPromise;\n\n    if (this.notifier) {\n      this.notifier.hash(transactionHash);\n    }\n\n    return {\n      transactionHash,\n      confirmation: confirmationPromise\n    };\n  }\n\n  async callConstantContractFunction(method, options) {\n    const m2 = method;\n    const {\n      blockNumber,\n      ...txOptions\n    } = options;\n    return m2.call(txOptions, blockNumber);\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest');\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n  }\n\n  setContractProvider(contract, contractJson, provider, networkId) {\n    contract.setProvider(provider);\n\n    try {\n      contract.options.address = contractJson.networks[networkId] && contractJson.networks[networkId].address;\n    } catch (error) {// console.log(error)\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/onceuponaprince/Desktop/beta-master/src/yam/lib/contracts.js"],"names":["BigNumber","Types","SUBTRACT_GAS_LIMIT","addressMap","rewardToken","ERC20Json","YAMv2Json","YAMJson","apyCalc","requiredFiles3x","require","context","requiredFilesBase","requiredFilesLp","images","Contracts","constructor","provider","networkId","web3","options","contracts","Map","pools","defaultConfirmations","autoGasMultiplier","confirmationType","ConfirmationType","Confirmed","defaultGas","defaultGasPrice","yam","eth","Contract","abi","yamV2","getPool","set","setProvider","files","sort","keys","forEach","fileName","json","pool","properties","poolContract","address","pool_address","stakingToken","stake_token_address","farm_icon_path","getCorrespondingImage","id","category","push","poolID","callContractFunction","method","confirmations","txOptions","blockGasLimit","setGasLimit","gasPrice","Simulate","gas","gasEstimate","console","log","estimateGas","error","data","encodeABI","from","value","to","_parent","_address","transactionData","multiplier","totalGas","Math","floor","g","toFixed","promi","send","OUTCOMES","INITIAL","RESOLVED","REJECTED","hashOutcome","confirmationOutcome","t","undefined","Object","values","includes","Error","hashPromise","confirmationPromise","Hash","Both","Promise","resolve","reject","on","anyPromi","off","txHash","desiredConf","confNumber","receipt","transactionHash","notifier","hash","confirmation","callConstantContractFunction","m2","blockNumber","call","block","getBlock","gasLimit","setContractProvider","contract","contractJson","networks"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js/bignumber';\nimport * as Types from \"./types.js\";\nimport { SUBTRACT_GAS_LIMIT, addressMap } from './constants.js';\nimport {rewardToken} from '../../constants/tokenAddresses'\n\nimport ERC20Json from '../clean_build/contracts/IERC20.json';\nimport YAMv2Json from '../clean_build/contracts/YAMv2.json';\nimport YAMJson from '../clean_build/contracts/YAMDelegator.json';\nimport apyCalc from '../clean_build/contracts/ApyCalculator.json';\n\nconst requiredFiles3x = require.context('../../pools/3x',false,/\\.json$/);\nconst requiredFilesBase = require.context('../../pools/base',false,/\\.json$/);\nconst requiredFilesLp = require.context('../../pools/lp',false,/\\.json$/);\nconst images = require.context('../../pools/', false,/\\.png$/);\n\nexport class Contracts {\n  constructor(\n    provider,\n    networkId,\n    web3,\n    options\n  ) {\n    this.web3 = web3;\n    this.contracts = new Map();\n    this.pools = [];\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n    this.yam = new this.web3.eth.Contract(YAMJson.abi);\n    this.yamV2 = new this.web3.eth.Contract(YAMv2Json.abi);\n\n    this.getPool(requiredFiles3x, '3x');\n    this.getPool(requiredFilesBase, 'base');\n    this.getPool(requiredFilesLp, 'lp');\n\n    this.contracts.set('GetAPY', new this.web3.eth.Contract(apyCalc, '0xa717A8d28BD76eFb0B9880b06C35034d8A7C8De7'));\n    this.contracts.set('Ausc', new this.web3.eth.Contract(ERC20Json.abi, rewardToken));\n    this.yam.setProvider(provider);\n  }\n\n  getPool(files, sort) {\n    files.keys().forEach(fileName => {\n      let json = files(fileName);\n      let pool = {\"properties\": json.properties, \"poolContract\": new this.web3.eth.Contract(json.abi) , \"stakingToken\": new this.web3.eth.Contract(ERC20Json.abi) };\n      pool.poolContract.options.address = json.properties.pool_address;\n      pool.stakingToken.options.address = json.properties.stake_token_address;\n      pool.properties.farm_icon_path = this.getCorrespondingImage(pool.properties.id, sort)\n      pool.properties.category = sort;\n      this.pools.push(pool);\n    })\n  }\n\n  getCorrespondingImage(poolID, sort){\n    try {\n      return require(`../../pools/${sort}/${poolID}.png`)\n    } catch {}\n     return require('../../assets/img/eth-diamond-purple.png')\n  }\n\n\n  async callContractFunction(\n    method,\n    options\n  ) {\n    const { confirmations, confirmationType, autoGasMultiplier, ...txOptions } = options;\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit();\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice;\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate;\n      if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n        txOptions.gas = this.defaultGas;\n      } else {\n        try {\n          console.log(\"estimating gas\");\n          gasEstimate = await method.estimateGas(txOptions);\n        } catch (error) {\n          const data = method.encodeABI();\n          const { from, value } = options;\n          const to = method._parent._address;\n          error.transactionData = { from, value, data, to };\n          throw error;\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n        const totalGas = Math.floor(gasEstimate * multiplier);\n        txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas;\n        return { gasEstimate, g };\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n    } else {\n      txOptions.value = '0';\n    }\n\n    const promi = method.send(txOptions);\n\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2,\n    };\n\n    let hashOutcome = OUTCOMES.INITIAL;\n    let confirmationOutcome = OUTCOMES.INITIAL;\n\n    const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`);\n    }\n\n    let hashPromise;\n    let confirmationPromise;\n\n    if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n      hashPromise = new Promise(\n        (resolve, reject) => {\n          promi.on('error', (error) => {\n            if (hashOutcome === OUTCOMES.INITIAL) {\n              hashOutcome = OUTCOMES.REJECTED;\n              reject(error);\n              const anyPromi = promi ;\n              anyPromi.off();\n            }\n          });\n\n          promi.on('transactionHash', (txHash) => {\n            if (hashOutcome === OUTCOMES.INITIAL) {\n              hashOutcome = OUTCOMES.RESOLVED;\n              resolve(txHash);\n              if (t !== Types.ConfirmationType.Both) {\n                const anyPromi = promi ;\n                anyPromi.off();\n              }\n            }\n          });\n        },\n      );\n    }\n\n    if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n      confirmationPromise = new Promise(\n        (resolve, reject) => {\n          promi.on('error', (error) => {\n            if (\n              (t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED)\n              && confirmationOutcome === OUTCOMES.INITIAL\n            ) {\n              confirmationOutcome = OUTCOMES.REJECTED;\n              reject(error);\n              const anyPromi = promi ;\n              anyPromi.off();\n            }\n          });\n\n          const desiredConf = confirmations || this.defaultConfirmations;\n          if (desiredConf) {\n            promi.on('confirmation', (confNumber, receipt) => {\n              if (confNumber >= desiredConf) {\n                if (confirmationOutcome === OUTCOMES.INITIAL) {\n                  confirmationOutcome = OUTCOMES.RESOLVED;\n                  resolve(receipt);\n                  const anyPromi = promi ;\n                  anyPromi.off();\n                }\n              }\n            });\n          } else {\n            promi.on('receipt', (receipt) => {\n              confirmationOutcome = OUTCOMES.RESOLVED;\n              resolve(receipt);\n              const anyPromi = promi ;\n              anyPromi.off();\n            });\n          }\n        },\n      );\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise;\n      if (this.notifier) {\n        this.notifier.hash(transactionHash)\n      }\n      return { transactionHash };\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise;\n    }\n\n    const transactionHash = await hashPromise;\n    if (this.notifier) {\n      this.notifier.hash(transactionHash)\n    }\n    return {\n      transactionHash,\n      confirmation: confirmationPromise,\n    };\n  }\n\n  async callConstantContractFunction(\n    method,\n    options\n  ) {\n    const m2 = method;\n    const { blockNumber, ...txOptions } = options;\n    return m2.call(txOptions, blockNumber);\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest');\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n  }\n\n  setContractProvider(\n    contract,\n    contractJson,\n    provider,\n    networkId,\n  ){\n    contract.setProvider(provider);\n    try {\n      contract.options.address = contractJson.networks[networkId]\n        && contractJson.networks[networkId].address;\n    } catch (error) {\n      // console.log(error)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}