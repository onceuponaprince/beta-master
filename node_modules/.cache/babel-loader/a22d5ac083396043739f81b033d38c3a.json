{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { getApy } from '../yamUtils';\nimport useYam from './useYam';\n\nconst useCalulateApy = (stakeToken, poolContract) => {\n  const [apy, setApy] = useState(Number.NaN);\n  const yam = useYam();\n  const calculateApy = useCallback(async () => {\n    if (poolContract.options.address !== '0xc1E44eaeDfaA349802A5F226F03105CefD81153f') setApy(Number.NaN);else setApy((await getApy(yam, stakeToken, poolContract.options.address, \"730434782600000000000000\")));\n  }, [yam, stakeToken]);\n  useEffect(() => {\n    if (stakeToken) {\n      calculateApy();\n      let refreshInterval = setInterval(calculateApy, 120000);\n      return () => clearInterval(refreshInterval);\n    }\n  }, [stakeToken]);\n\n  function refresh() {\n    if (stakeToken) {\n      calculateApy();\n    }\n  }\n\n  return [apy, refresh];\n};\n\nexport default useCalulateApy;","map":{"version":3,"sources":["/Users/onceuponaprince/Desktop/beta-master/src/hooks/useCalculateApy.ts"],"names":["useCallback","useEffect","useState","getApy","useYam","useCalulateApy","stakeToken","poolContract","apy","setApy","Number","NaN","yam","calculateApy","options","address","refreshInterval","setInterval","clearInterval","refresh"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAIA,SAAQC,MAAR,QAAgC,aAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,cAAc,GAAG,CAACC,UAAD,EAAuBC,YAAvB,KAAuE;AAC1F,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAACQ,MAAM,CAACC,GAAR,CAA9B;AACA,QAAMC,GAAG,GAAGR,MAAM,EAAlB;AAGA,QAAMS,YAAY,GAAGb,WAAW,CAAC,YAAY;AACzC,QAAIO,YAAY,CAACO,OAAb,CAAqBC,OAArB,KAAiC,4CAArC,EACIN,MAAM,CAACC,MAAM,CAACC,GAAR,CAAN,CADJ,KAGIF,MAAM,EAAC,MAAMN,MAAM,CAACS,GAAD,EAAKN,UAAL,EAAiBC,YAAY,CAACO,OAAb,CAAqBC,OAAtC,EAA+C,0BAA/C,CAAb,EAAN;AACP,GAL+B,EAK7B,CAACH,GAAD,EAAKN,UAAL,CAL6B,CAAhC;AAOAL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,UAAJ,EAAgB;AACZO,MAAAA,YAAY;AACZ,UAAIG,eAAe,GAAGC,WAAW,CAACJ,YAAD,EAAe,MAAf,CAAjC;AACA,aAAO,MAAMK,aAAa,CAACF,eAAD,CAA1B;AACH;AACJ,GANQ,EAMN,CAACV,UAAD,CANM,CAAT;;AAQA,WAASa,OAAT,GAAmB;AACf,QAAIb,UAAJ,EAAgB;AACZO,MAAAA,YAAY;AACf;AACJ;;AAED,SAAO,CAACL,GAAD,EAAMW,OAAN,CAAP;AACH,CA3BD;;AA6BA,eAAed,cAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nimport { Contract } from \"web3-eth-contract\"\n\nimport {getApy, getEarned} from '../yamUtils'\nimport useYam from './useYam'\n\nconst useCalulateApy = (stakeToken: Contract, poolContract: Contract) : [number, ()=>void] => {\n    const [apy, setApy] = useState(Number.NaN)\n    const yam = useYam()\n\n\n    const calculateApy = useCallback(async () => {\n        if (poolContract.options.address !== '0xc1E44eaeDfaA349802A5F226F03105CefD81153f')\n            setApy(Number.NaN);\n        else\n            setApy(await getApy(yam,stakeToken, poolContract.options.address, \"730434782600000000000000\"))\n    }, [yam,stakeToken])\n\n    useEffect(() => {\n        if (stakeToken) {\n            calculateApy()\n            let refreshInterval = setInterval(calculateApy, 120000)\n            return () => clearInterval(refreshInterval)\n        }\n    }, [stakeToken])\n\n    function refresh() {\n        if (stakeToken) {\n            calculateApy()\n        }\n    }\n\n    return [apy, refresh]\n}\n\nexport default useCalulateApy"]},"metadata":{},"sourceType":"module"}