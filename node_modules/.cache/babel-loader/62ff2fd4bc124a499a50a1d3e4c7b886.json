{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { getDecimalPlaces } from '../yamUtils';\nimport useYam from \"./useYam\";\n\nconst useTokenDecimals = tokenAddress => {\n  const [decimals, setDecimals] = useState(18);\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const yam = useYam();\n  const fetchDecimals = useCallback(async () => {\n    setDecimals((await getDecimalPlaces(yam, tokenAddress)));\n  }, [tokenAddress]);\n  useEffect(() => {\n    if (account && ethereum) {\n      fetchDecimals();\n    }\n  }, [account, ethereum]);\n  return decimals;\n};\n\nexport default useTokenDecimals;","map":{"version":3,"sources":["/Users/onceuponaprince/Desktop/beta-master/src/hooks/useTokenDecimals.ts"],"names":["useCallback","useEffect","useState","useWallet","getDecimalPlaces","useYam","useTokenDecimals","tokenAddress","decimals","setDecimals","account","ethereum","yam","fetchDecimals"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAGA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SAASC,gBAAT,QAAiC,aAAjC;AAGA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,gBAAgB,GAAIC,YAAD,IAA0B;AAC/C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAiER,SAAS,EAAhF;AACA,QAAMS,GAAG,GAAGP,MAAM,EAAlB;AAEA,QAAMQ,aAAa,GAAGb,WAAW,CAAC,YAAY;AAC1CS,IAAAA,WAAW,EAAE,MAAML,gBAAgB,CAACQ,GAAD,EAAKL,YAAL,CAAxB,EAAX;AACH,GAFgC,EAE9B,CAACA,YAAD,CAF8B,CAAjC;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,OAAO,IAAIC,QAAf,EAAyB;AACrBE,MAAAA,aAAa;AAChB;AACJ,GAJQ,EAIN,CAACH,OAAD,EAAUC,QAAV,CAJM,CAAT;AAMA,SAAOH,QAAP;AACH,CAhBD;;AAkBA,eAAeF,gBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\nimport { Contract } from \"web3-eth-contract\"\nimport { getDecimalPlaces } from '../yamUtils'\n\nimport { getBalance } from '../utils/erc20'\nimport useYam from \"./useYam\";\n\nconst useTokenDecimals = (tokenAddress: string) => {\n    const [decimals, setDecimals] = useState(18)\n    const { account, ethereum }: { account: string, ethereum: provider } = useWallet()\n    const yam = useYam();\n\n    const fetchDecimals = useCallback(async () => {\n        setDecimals( await getDecimalPlaces(yam,tokenAddress))\n    }, [tokenAddress])\n\n    useEffect(() => {\n        if (account && ethereum) {\n            fetchDecimals()\n        }\n    }, [account, ethereum])\n\n    return decimals\n}\n\nexport default useTokenDecimals"]},"metadata":{},"sourceType":"module"}