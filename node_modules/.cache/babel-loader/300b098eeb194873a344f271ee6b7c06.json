{"ast":null,"code":"var _jsxFileName = \"/Users/onceuponaprince/Desktop/beta-master/src/contexts/Farms/Farms.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { rewardToken as rewardAddress } from '../../constants/tokenAddresses';\nimport useYam from '../../hooks/useYam';\nimport { bnToDec } from '../../utils';\nimport { getPoolContracts, getEarned } from '../../yamUtils';\nimport Context from './context';\n\nconst Farms = ({\n  children\n}) => {\n  const [farms, setFarms] = useState([]);\n  const [unharvested, setUnharvested] = useState(0);\n  const yam = useYam();\n  const {\n    account\n  } = useWallet();\n  const fetchPools = useCallback(async () => {\n    const pools = getPoolContracts(yam);\n    const farmsArr = [];\n    pools.forEach(pool => {\n      farmsArr.push({\n        contract: pool.poolContract,\n        stakingTokenContract: pool.stakingToken,\n        name: pool.properties.id,\n        depositToken: pool.properties.stake_token_name,\n        depositTokenAddress: pool.properties.stake_token_address,\n        earnToken: 'AUSDC',\n        earnTokenAddress: rewardAddress,\n        icon: pool.properties.farm_icon_path,\n        id: pool.properties.id,\n        sort: pool.properties.index,\n        category: pool.properties.category\n      });\n    });\n    farmsArr.sort((a, b) => a.sort < b.sort ? 1 : -1);\n    setFarms(farmsArr);\n  }, [yam, setFarms]);\n  useEffect(() => {\n    if (yam) {\n      fetchPools();\n    }\n  }, [yam, fetchPools]);\n  useEffect(() => {\n    async function fetchUnharvested() {\n      const unharvestedBalances = await Promise.all(farms.map(async farm => {\n        const earnings = await getEarned(yam, farm.contract, account);\n        return bnToDec(earnings);\n      }));\n      const totalBal = unharvestedBalances.reduce((acc, val) => acc + val);\n      setUnharvested(totalBal);\n    }\n\n    if (account && farms.length && yam) {\n      fetchUnharvested();\n    }\n  }, [account, farms, setUnharvested, yam]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      farms,\n      unharvested\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default Farms;","map":{"version":3,"sources":["/Users/onceuponaprince/Desktop/beta-master/src/contexts/Farms/Farms.tsx"],"names":["React","useCallback","useEffect","useState","useWallet","rewardToken","rewardAddress","useYam","bnToDec","getPoolContracts","getEarned","Context","Farms","children","farms","setFarms","unharvested","setUnharvested","yam","account","fetchPools","pools","farmsArr","forEach","pool","push","contract","poolContract","stakingTokenContract","stakingToken","name","properties","id","depositToken","stake_token_name","depositTokenAddress","stake_token_address","earnToken","earnTokenAddress","icon","farm_icon_path","sort","index","category","a","b","fetchUnharvested","unharvestedBalances","Promise","all","map","farm","earnings","totalBal","reduce","acc","val","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SAASC,WAAW,IAAIC,aAAxB,QAA6C,gCAA7C;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,gBAA5C;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,KAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAExC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,CAAD,CAA9C;AAEA,QAAMe,GAAG,GAAGX,MAAM,EAAlB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcf,SAAS,EAA7B;AAEA,QAAMgB,UAAU,GAAGnB,WAAW,CAAC,YAAY;AACzC,UAAMoB,KAAK,GAAGZ,gBAAgB,CAACS,GAAD,CAA9B;AACA,UAAMI,QAAgB,GAAG,EAAzB;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAeC,IAAD,IAAQ;AACpBF,MAAAA,QAAQ,CAACG,IAAT,CAAc;AACZC,QAAAA,QAAQ,EAAEF,IAAI,CAACG,YADH;AAEZC,QAAAA,oBAAoB,EAAEJ,IAAI,CAACK,YAFf;AAGZC,QAAAA,IAAI,EAAEN,IAAI,CAACO,UAAL,CAAgBC,EAHV;AAIZC,QAAAA,YAAY,EAAET,IAAI,CAACO,UAAL,CAAgBG,gBAJlB;AAKZC,QAAAA,mBAAmB,EAAEX,IAAI,CAACO,UAAL,CAAgBK,mBALzB;AAMZC,QAAAA,SAAS,EAAE,OANC;AAOZC,QAAAA,gBAAgB,EAAEhC,aAPN;AAQZiC,QAAAA,IAAI,EAAEf,IAAI,CAACO,UAAL,CAAgBS,cARV;AASZR,QAAAA,EAAE,EAAER,IAAI,CAACO,UAAL,CAAgBC,EATR;AAUZS,QAAAA,IAAI,EAAEjB,IAAI,CAACO,UAAL,CAAgBW,KAVV;AAWZC,QAAAA,QAAQ,EAAEnB,IAAI,CAACO,UAAL,CAAgBY;AAXd,OAAd;AAaD,KAdD;AAgBArB,IAAAA,QAAQ,CAACmB,IAAT,CAAc,CAACG,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAAX,GAAkB,CAAlB,GAAsB,CAAC,CAA/C;AACA1B,IAAAA,QAAQ,CAACO,QAAD,CAAR;AACD,GArB6B,EAqB3B,CAACJ,GAAD,EAAMH,QAAN,CArB2B,CAA9B;AAuBAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,GAAJ,EAAS;AACPE,MAAAA,UAAU;AACX;AACF,GAJQ,EAIN,CAACF,GAAD,EAAME,UAAN,CAJM,CAAT;AAMAlB,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe4C,gBAAf,GAAmC;AACjC,YAAMC,mBAAmB,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYnC,KAAK,CAACoC,GAAN,CAAU,MAAOC,IAAP,IAAsB;AAC5E,cAAMC,QAAQ,GAAG,MAAM1C,SAAS,CAACQ,GAAD,EAAMiC,IAAI,CAACzB,QAAX,EAAqBP,OAArB,CAAhC;AACA,eAAOX,OAAO,CAAC4C,QAAD,CAAd;AACD,OAH6C,CAAZ,CAAlC;AAIA,YAAMC,QAAQ,GAAGN,mBAAmB,CAACO,MAApB,CAA2B,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGC,GAA/C,CAAjB;AACAvC,MAAAA,cAAc,CAACoC,QAAD,CAAd;AACD;;AACD,QAAIlC,OAAO,IAAIL,KAAK,CAAC2C,MAAjB,IAA2BvC,GAA/B,EAAoC;AAClC4B,MAAAA,gBAAgB;AACjB;AACF,GAZQ,EAYN,CAAC3B,OAAD,EAAUL,KAAV,EAAiBG,cAAjB,EAAiCC,GAAjC,CAZM,CAAT;AAcA,sBACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AACvBJ,MAAAA,KADuB;AAEvBE,MAAAA;AAFuB,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGH,QAJH,CADF;AAQD,CA3DD;;AA6DA,eAAeD,KAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { rewardToken as rewardAddress } from '../../constants/tokenAddresses'\nimport useYam from '../../hooks/useYam'\nimport { bnToDec } from '../../utils'\nimport { getPoolContracts, getEarned } from '../../yamUtils'\nimport Context from './context'\nimport { Farm, PoolProperties } from './types'\n\nconst Farms: React.FC = ({ children }) => {\n\n  const [farms, setFarms] = useState<Farm[]>([])\n  const [unharvested, setUnharvested] = useState(0)\n\n  const yam = useYam()\n  const { account } = useWallet()\n\n  const fetchPools = useCallback(async () => {\n    const pools = getPoolContracts(yam) as [{properties: PoolProperties, poolContract: Contract, stakingToken: Contract}]\n    const farmsArr: Farm[] = []\n    pools.forEach((pool)=>{\n      farmsArr.push({\n        contract: pool.poolContract,\n        stakingTokenContract: pool.stakingToken,\n        name: pool.properties.id,\n        depositToken: pool.properties.stake_token_name,\n        depositTokenAddress: pool.properties.stake_token_address,\n        earnToken: 'AUSDC',\n        earnTokenAddress: rewardAddress,\n        icon: pool.properties.farm_icon_path,\n        id: pool.properties.id,\n        sort: pool.properties.index,\n        category: pool.properties.category\n      })\n    })\n\n    farmsArr.sort((a, b) => a.sort < b.sort ? 1 : -1)\n    setFarms(farmsArr)\n  }, [yam, setFarms])\n\n  useEffect(() => {\n    if (yam) {\n      fetchPools()\n    }\n  }, [yam, fetchPools])\n\n  useEffect(() => {\n    async function fetchUnharvested () {\n      const unharvestedBalances = await Promise.all(farms.map(async (farm: Farm) => {\n        const earnings = await getEarned(yam, farm.contract, account)\n        return bnToDec(earnings)\n      }))\n      const totalBal = unharvestedBalances.reduce((acc, val) => acc + val)\n      setUnharvested(totalBal)\n    }\n    if (account && farms.length && yam) {\n      fetchUnharvested()\n    }\n  }, [account, farms, setUnharvested, yam])\n\n  return (\n    <Context.Provider value={{\n      farms,\n      unharvested,\n    }}>\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}