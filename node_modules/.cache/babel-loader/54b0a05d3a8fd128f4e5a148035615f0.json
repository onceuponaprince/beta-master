{"ast":null,"code":"var _jsxFileName = \"/Users/onceuponaprince/Desktop/beta-master/src/views/Farm/components/LoadingButton.tsx\";\nimport React, { useState } from 'react';\nimport Button from \"../../../components/Button\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport useModal from \"../../../hooks/useModal\";\nimport ConfirmModal from \"../../../components/ConfirmModal\";\n\nconst LoadingButton = ({\n  onClick,\n  onSuccess,\n  defaultText,\n  loadingText,\n  disabled,\n  onFinished\n}) => {\n  const [isLoading, setLoading] = useState(false);\n  const [onPresentConfirmModal, dismiss] = useModal( /*#__PURE__*/React.createElement(ConfirmModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 55\n    }\n  }));\n\n  const handleClick = () => {\n    setLoading(true);\n    onPresentConfirmModal();\n    onClick().then(result => {\n      setLoading(false);\n      dismiss();\n\n      if (result && onSuccess !== undefined) {\n        onSuccess();\n      }\n\n      if (onFinished !== undefined) {\n        onFinished();\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Button, {\n    disabled: isLoading || disabled,\n    onClick: !isLoading ? handleClick : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }\n  }, loadingText + \"  \", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faSpinner,\n    pulse: true,\n    style: {\n      marginLeft: '5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 93\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 169\n    }\n  }, defaultText));\n};\n\nexport default LoadingButton;","map":{"version":3,"sources":["/Users/onceuponaprince/Desktop/beta-master/src/views/Farm/components/LoadingButton.tsx"],"names":["React","useState","Button","FontAwesomeIcon","faSpinner","useModal","ConfirmModal","LoadingButton","onClick","onSuccess","defaultText","loadingText","disabled","onFinished","isLoading","setLoading","onPresentConfirmModal","dismiss","handleClick","then","result","undefined","display","alignItems","marginLeft"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;;AAWA,MAAMC,aAAqC,GAAG,CAC1C;AACEC,EAAAA,OADF;AAEEC,EAAAA,SAFF;AAGEC,EAAAA,WAHF;AAIEC,EAAAA,WAJF;AAKEC,EAAAA,QALF;AAMEC,EAAAA;AANF,CAD0C,KAS9C;AACE,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;AACE,QAAM,CAACe,qBAAD,EAAwBC,OAAxB,IAAmCZ,QAAQ,eAAC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAD,CAAjD;;AAEF,QAAMa,WAAW,GAAG,MAAO;AACvBH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,IAAAA,qBAAqB;AACrBR,IAAAA,OAAO,GAAGW,IAAV,CAAgBC,MAAD,IAAY;AACvBL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,OAAO;;AAEP,UAAGG,MAAM,IAAIX,SAAS,KAAKY,SAA3B,EAAqC;AACjCZ,QAAAA,SAAS;AACZ;;AACD,UAAII,UAAU,KAAKQ,SAAnB,EAA8B;AAC1BR,QAAAA,UAAU;AACb;AACJ,KAVD;AAUI,GAbR;;AAeA,sBACE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAEC,SAAS,IAAIF,QADzB;AAEE,IAAA,OAAO,EAAE,CAACE,SAAD,GAAaI,WAAb,GAA2B,IAFtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKJ,SAAS,gBAAG;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,UAAU,EAAE;AAA9B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsDZ,WAAW,GAAC,IAAlE,eAAuE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEP,SAAvB;AAAkC,IAAA,KAAK,MAAvC;AAAwC,IAAA,KAAK,EAAE;AAACoB,MAAAA,UAAU,EAAE;AAAb,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAvE,CAAH,gBAAsJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMd,WAAN,CAHpK,CADF;AAOD,CAnCD;;AAsCA,eAAeH,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Button from \"../../../components/Button\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\nimport useModal from \"../../../hooks/useModal\";\nimport ConfirmModal from \"../../../components/ConfirmModal\";\n\ninterface LoadingProps {\n  onClick: () => Promise<boolean>,\n  onSuccess?: () => void,\n  defaultText: string,\n  loadingText: string,\n  disabled?: boolean,\n  onFinished?: () => void\n}\n\nconst LoadingButton: React.FC<LoadingProps> = (\n    {\n      onClick,\n      onSuccess,\n      defaultText,\n      loadingText,\n      disabled,\n      onFinished\n    }) =>\n{\n  const [isLoading, setLoading] = useState(false);\n    const [onPresentConfirmModal, dismiss] = useModal(<ConfirmModal />)\n\n  const handleClick = () =>  {\n      setLoading(true);\n      onPresentConfirmModal();\n      onClick().then((result) => {\n          setLoading(false);\n          dismiss();\n\n          if(result && onSuccess !== undefined){\n              onSuccess();\n          }\n          if (onFinished !== undefined) {\n              onFinished();\n          }\n      }) };\n\n  return (\n    <Button\n      disabled={isLoading || disabled}\n      onClick={!isLoading ? handleClick : null}>\n        {isLoading ? <div style={{display: 'flex', alignItems: 'center'}}>{loadingText+\"  \"}<FontAwesomeIcon icon={faSpinner} pulse style={{marginLeft: '5'}}/></div> : <div>{defaultText}</div>}\n    </Button>\n  );\n}\n\n\nexport default LoadingButton\n"]},"metadata":{},"sourceType":"module"}